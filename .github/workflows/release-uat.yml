name: Release to UAT

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      frontend_image_tag:
        description: "Frontend Docker image tag (e.g., latest, v1.0.0, or commit SHA)"
        required: true
        default: "latest"
      backend_image_tag:
        description: "Backend Docker image tag (e.g., latest, v1.0.0, or commit SHA)"
        required: true
        default: "latest"
      # Optional: Full image URIs if your registry/naming changes
      # frontend_image_uri:
      #   description: 'Full Frontend Docker image URI (e.g., ghcr.io/youruser/frontend)'
      #   required: false
      # backend_image_uri:
      #   description: 'Full Backend Docker image URI (e.g., ghcr.io/youruser/backend)'
      #   required: false

jobs:
  deploy_to_uat:
    name: Deploy to UAT Environment
    runs-on: ubuntu-latest
    environment: uat # Optional: Define a GitHub environment for UAT for protection rules, etc.

    steps:
      - name: Checkout code (optional, for context)
        uses: actions/checkout@v4

      - name: Set Image URIs with Tags
        id: image_uris
        run: |
          frontend_uri_base=${{ github.event.inputs.frontend_image_uri || 'ghcr.io/chirag1507/digital-kudos-wall-frontend' }}
          backend_uri_base=${{ github.event.inputs.backend_image_uri || 'ghcr.io/chirag1507/digital-kudos-wall-backend' }}

          echo "FRONTEND_IMG=${frontend_uri_base}:${{ github.event.inputs.frontend_image_tag }}" >> $GITHUB_ENV
          echo "BACKEND_IMG=${backend_uri_base}:${{ github.event.inputs.backend_image_tag }}" >> $GITHUB_ENV

          echo "Deploying Frontend: ${frontend_uri_base}:${{ github.event.inputs.frontend_image_tag }}"
          echo "Deploying Backend: ${backend_uri_base}:${{ github.event.inputs.backend_image_tag }}"

      - name: Deploy to UAT EC2 via SSH
        uses: appleboy/ssh-action@master # Or use v1.0.0 or a specific SHA for stability
        with:
          host: ${{ secrets.UAT_SSH_HOST }}
          username: ${{ secrets.UAT_SSH_USER }}
          key: ${{ secrets.UAT_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Deploying to UAT..."
            export FRONTEND_IMAGE_URI_WITH_TAG="${{ env.FRONTEND_IMG }}"
            export BACKEND_IMAGE_URI_WITH_TAG="${{ env.BACKEND_IMG }}"

            echo "VERIFYING ENVIRONMENT VARIABLES ON EC2:"
            echo "Frontend Image ENV VAR: $FRONTEND_IMAGE_URI_WITH_TAG"
            echo "Backend Image ENV VAR: $BACKEND_IMAGE_URI_WITH_TAG"

            cd /opt/digital-kudos-wall

            echo "VERIFYING DOCKER-COMPOSE.YML on EC2:"
            cat docker-compose.yml

            echo "VERIFYING RESOLVED DOCKER-COMPOSE CONFIG ON EC2:"
            sudo FRONTEND_IMAGE_URI_WITH_TAG="$FRONTEND_IMAGE_URI_WITH_TAG" BACKEND_IMAGE_URI_WITH_TAG="$BACKEND_IMAGE_URI_WITH_TAG" /usr/local/bin/docker-compose config

            echo "Stopping existing services (if any)..."
            sudo FRONTEND_IMAGE_URI_WITH_TAG="$FRONTEND_IMAGE_URI_WITH_TAG" BACKEND_IMAGE_URI_WITH_TAG="$BACKEND_IMAGE_URI_WITH_TAG" /usr/local/bin/docker-compose down || echo "No services were running or error during down, proceeding."

            echo "Running docker-compose pull..."
            sudo FRONTEND_IMAGE_URI_WITH_TAG="$FRONTEND_IMAGE_URI_WITH_TAG" BACKEND_IMAGE_URI_WITH_TAG="$BACKEND_IMAGE_URI_WITH_TAG" /usr/local/bin/docker-compose pull

            echo "Running docker-compose up -d --force-recreate..."
            sudo FRONTEND_IMAGE_URI_WITH_TAG="$FRONTEND_IMAGE_URI_WITH_TAG" BACKEND_IMAGE_URI_WITH_TAG="$BACKEND_IMAGE_URI_WITH_TAG" /usr/local/bin/docker-compose up -d --force-recreate frontend backend

            echo "Listing running containers..."
            sudo docker ps -a

            echo "Checking frontend container logs (last 20 lines)..."
            sudo docker logs digital-kudos-wall-frontend-1 --tail 20 || echo "Could not get frontend logs."

            echo "Deployment script finished."

      - name: Record Deployed Versions
        run: |
          echo "Recording deployed versions..."
          # The main repository (digital-kudos-wall) is already checked out 
          # by the 'Checkout code (optional, for context)' step at the beginning of this job.
          mkdir -p state
          cat <<EOF > state/uat-deployed-versions.json
          {
            "frontend_image_uri_with_tag": "${{ env.FRONTEND_IMG }}",
            "backend_image_uri_with_tag": "${{ env.BACKEND_IMG }}"
          }
          EOF
          echo "Content of state/uat-deployed-versions.json:"
          cat state/uat-deployed-versions.json

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add state/uat-deployed-versions.json

          if git diff --staged --quiet; then
            echo "No changes to deployed versions file to commit."
          else
            git commit -m "CI: Record UAT deployed versions"
            echo "Attempting to push changes to remote repository..."
            git push
            echo "Push command executed."
          fi

  run_smoke_tests:
    name: Run Smoke Tests on UAT
    runs-on: ubuntu-latest
    needs: deploy_to_uat # This job runs only if deploy_to_uat succeeds
    if: always() # Or success() if you only want to run on successful deployment

    steps:
      - name: Checkout System Tests Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/digital-kudos-wall-system-tests # Assumes it's under the same owner
          path: digital-kudos-wall-system-tests
          # token: ${{ secrets.PAT_FOR_SYSTEM_TESTS_REPO }} # If the system tests repo is private and in a different org, or needs special access

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18" # Or your desired version

      - name: Install Playwright Browsers
        working-directory: ./digital-kudos-wall-system-tests
        run: npx playwright install --with-deps

      - name: Install System Test Dependencies
        working-directory: ./digital-kudos-wall-system-tests
        run: npm ci

      - name: Run Smoke Tests
        working-directory: ./digital-kudos-wall-system-tests
        env:
          CI_BASE_URL: http://${{ secrets.UAT_SSH_HOST }}:3000 # Custom env var for Playwright config
          # APP_BACKEND_URL: http://${{ secrets.UAT_SSH_HOST }}:3001 # Keep if your tests need direct backend access
          CI: true
        run: |
          echo "Running smoke tests against UAT..."
          echo "Target Frontend URL (from CI_BASE_URL): $CI_BASE_URL"
          npm run test:smoke
