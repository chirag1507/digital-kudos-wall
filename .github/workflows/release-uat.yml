name: Release to UAT

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      frontend_image_tag:
        description: "Frontend Docker image tag (commit SHA or tag)"
        required: true
        default: "latest"
      backend_image_tag:
        description: "Backend Docker image tag (commit SHA or tag)"
        required: true
        default: "latest"
      # Optional: Full image URIs if your registry/naming changes
      # frontend_image_uri:
      #   description: 'Full Frontend Docker image URI (e.g., ghcr.io/youruser/frontend)'
      #   required: false
      # backend_image_uri:
      #   description: 'Full Backend Docker image URI (e.g., ghcr.io/youruser/backend)'
      #   required: false

jobs:
  check_can_deploy:
    name: Check if services can be deployed to UAT
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: Install Pact CLI
        run: |
          wget -q https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v2.4.1/pact-2.4.1-linux-x86_64.tar.gz
          tar xzf pact-2.4.1-linux-x86_64.tar.gz
          echo "$PWD/pact/bin" >> $GITHUB_PATH

      - name: Debug Pact Broker Configuration
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
        run: |
          echo "Pact Broker Base URL (masked): ${PACT_BROKER_BASE_URL:0:8}..."
          echo "Frontend version: ${{ github.event.inputs.frontend_image_tag }}"
          echo "Backend version: ${{ github.event.inputs.backend_image_tag }}"

          # Test basic connectivity to Pact Broker
          if [ -n "$PACT_BROKER_BASE_URL" ]; then
            echo "Testing Pact Broker connectivity..."
            curl -f -s -o /dev/null "$PACT_BROKER_BASE_URL" && echo "✅ Pact Broker is reachable" || echo "❌ Pact Broker connection failed"
          else
            echo "❌ PACT_BROKER_BASE_URL is not set"
          fi

      - name: Can I deploy frontend?
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        run: |
          echo "Checking if frontend version ${{ github.event.inputs.frontend_image_tag }} can be deployed to UAT..."

          # Skip Pact checks if no Pact Broker is configured (for initial setup)
          if [ -z "$PACT_BROKER_BASE_URL" ]; then
            echo "⚠️  No Pact Broker configured - skipping contract verification"
            echo "This is acceptable for initial deployment setup"
            exit 0
          fi

          pact-broker can-i-deploy \
            --pacticipant digital-kudos-wall-frontend \
            --version ${{ github.event.inputs.frontend_image_tag }} \
            --to-environment uat \
            --retry-while-unknown 0 \
            --retry-interval 10

      - name: Can I deploy backend?
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        run: |
          echo "Checking if backend version ${{ github.event.inputs.backend_image_tag }} can be deployed to UAT..."

          # Skip Pact checks if no Pact Broker is configured (for initial setup)
          if [ -z "$PACT_BROKER_BASE_URL" ]; then
            echo "⚠️  No Pact Broker configured - skipping contract verification"
            echo "This is acceptable for initial deployment setup"
            exit 0
          fi

          pact-broker can-i-deploy \
            --pacticipant digital-kudos-wall-backend \
            --version ${{ github.event.inputs.backend_image_tag }} \
            --to-environment uat \
            --retry-while-unknown 0 \
            --retry-interval 10

  deploy_to_uat:
    name: Deploy to UAT Environment
    runs-on: ubuntu-latest
    needs: check_can_deploy
    environment: uat

    steps:
      - name: Set Image URIs with Tags
        id: image_uris
        run: |
          frontend_uri_base=${{ github.event.inputs.frontend_image_uri || 'ghcr.io/chirag1507/digital-kudos-wall-frontend' }}
          backend_uri_base=${{ github.event.inputs.backend_image_uri || 'ghcr.io/chirag1507/digital-kudos-wall-backend' }}

          echo "FRONTEND_IMG=${frontend_uri_base}:${{ github.event.inputs.frontend_image_tag }}" >> $GITHUB_ENV
          echo "BACKEND_IMG=${backend_uri_base}:${{ github.event.inputs.backend_image_tag }}" >> $GITHUB_ENV

          echo "Deploying Frontend: ${frontend_uri_base}:${{ github.event.inputs.frontend_image_tag }}"
          echo "Deploying Backend: ${backend_uri_base}:${{ github.event.inputs.backend_image_tag }}"

      - name: Deploy to UAT EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.UAT_SSH_HOST }}
          username: ${{ secrets.UAT_SSH_USER }}
          key: ${{ secrets.UAT_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Deploying to UAT..."
            cd /opt/digital-kudos-wall

            # Create and set up the database directory with schema
            echo "Setting up database directory..."
            sudo mkdir -p /opt/digital-kudos-wall/prisma
            sudo touch /opt/digital-kudos-wall/prisma/uat.db

            # Create schema.prisma file
            echo "Creating Prisma schema..."
            cat <<EOF | sudo tee /opt/digital-kudos-wall/prisma/schema.prisma
            generator client {
              provider = "prisma-client-js"
            }

            datasource db {
              provider = "sqlite"
              url      = env("DATABASE_URL")
            }

            model User {
              id        String   @id @default(cuid())
              name      String
              email     String   @unique
              password  String
              isEmailVerified Boolean @default(false)
              createdAt DateTime @default(now())
              updatedAt DateTime @updatedAt
            }
            EOF

            # Set proper permissions
            sudo chown -R 1000:1000 /opt/digital-kudos-wall/prisma
            sudo chmod 755 /opt/digital-kudos-wall/prisma
            sudo chmod 644 /opt/digital-kudos-wall/prisma/uat.db
            sudo chmod 644 /opt/digital-kudos-wall/prisma/schema.prisma

            echo "Writing explicit network docker-compose.yml..."
            cat <<EOF | sudo tee docker-compose.yml
            version: '3.8'
            services:
              frontend:
                image: \${FRONTEND_IMAGE_URI_WITH_TAG}
                ports: ["3000:80"]
                restart: unless-stopped
                depends_on:
                  backend:
                    condition: service_healthy
                networks: [kudos-net]
              backend:
                image: \${BACKEND_IMAGE_URI_WITH_TAG}
                ports: ["3001:3001"]
                restart: unless-stopped
                user: "1000:1000"
                environment:
                  - NODE_ENV=uat
                  - PORT=3001
                  - DATABASE_URL=file:/app/prisma/uat.db
                networks: [kudos-net]
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
                  interval: 5s
                  timeout: 3s
                  retries: 3
                  start_period: 30s
                command: >
                  /bin/sh -c "
                    cd /app &&
                    echo 'Running database migrations...' &&
                    npx prisma migrate deploy &&
                    echo 'Generating Prisma client...' &&
                    npx prisma generate &&
                    echo 'Starting application...' &&
                    node dist/app.js
                  "
                volumes:
                  - /opt/digital-kudos-wall/prisma:/app/prisma:rw
            networks:
              kudos-net:
            EOF

            sudo FRONTEND_IMAGE_URI_WITH_TAG="${{ env.FRONTEND_IMG }}" BACKEND_IMAGE_URI_WITH_TAG="${{ env.BACKEND_IMG }}" /usr/local/bin/docker-compose --project-name digital-kudos-wall down --remove-orphans || echo "No services were running."
            sudo FRONTEND_IMAGE_URI_WITH_TAG="${{ env.FRONTEND_IMG }}" BACKEND_IMAGE_URI_WITH_TAG="${{ env.BACKEND_IMG }}" /usr/local/bin/docker-compose --project-name digital-kudos-wall up -d --force-recreate

            echo "Deployment script finished."
            echo "Pausing for 15 seconds to allow services to stabilize..."
            sleep 15

            echo "--- DIAGNOSTICS: Inspecting Docker state ---"
            echo "Listing running containers (docker ps):"
            sudo docker ps -a
            echo "Listing Docker networks (docker network ls):"
            sudo docker network ls
            echo "Inspecting kudos-net network (docker network inspect):"
            sudo docker network inspect digital-kudos-wall_kudos-net || true
            echo "--- END DIAGNOSTICS ---"

            # Wait for backend to be healthy (up to 30 seconds)
            echo "Waiting for backend to be healthy..."
            COUNTER=0
            while [ $COUNTER -lt 30 ]; do
              BACKEND_STATUS=$(sudo docker inspect --format='{{.State.Status}}' digital-kudos-wall-backend-1 2>/dev/null || echo "not_found")
              BACKEND_HEALTH=$(sudo docker inspect --format='{{.State.Health.Status}}' digital-kudos-wall-backend-1 2>/dev/null || echo "none")
              
              echo "Backend status: $BACKEND_STATUS, health: $BACKEND_HEALTH"
              
              if [ "$BACKEND_STATUS" = "running" ]; then
                if [ "$BACKEND_HEALTH" = "none" ] || [ "$BACKEND_HEALTH" = "healthy" ]; then
                  echo "Backend is running and healthy"
                  break
                fi
              fi
              
              echo "Waiting for backend to be ready... (attempt $COUNTER/30)"
              sleep 1
              COUNTER=$((COUNTER + 1))
            done

            if [ $COUNTER -eq 30 ]; then
              echo "Backend failed to become healthy within timeout"
              echo "Backend logs:"
              sudo docker logs digital-kudos-wall-backend-1
              exit 1
            fi

            # Get container IPs with better error handling
            echo "Getting container IPs..."
            FRONTEND_IP=$(sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' digital-kudos-wall-frontend-1 2>/dev/null || echo "")
            BACKEND_IP=$(sudo docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' digital-kudos-wall-backend-1 2>/dev/null || echo "")

            if [ -z "$FRONTEND_IP" ] || [ -z "$BACKEND_IP" ]; then
              echo "Failed to get container IPs"
              echo "Frontend IP: $FRONTEND_IP"
              echo "Backend IP: $BACKEND_IP"
              echo "Container status:"
              sudo docker ps -a
              exit 1
            fi

            echo "Frontend container IP: $FRONTEND_IP"
            echo "Backend container IP: $BACKEND_IP"

            # Test backend health endpoint directly
            echo "Testing backend health endpoint..."
            HEALTH_CHECK_RESULT=$(curl -s -o /dev/null -w "%{http_code}" http://${BACKEND_IP}:3001/health || echo "failed")
            if [ "$HEALTH_CHECK_RESULT" != "200" ]; then
              echo "Backend health check failed with status: $HEALTH_CHECK_RESULT"
              echo "Backend logs:"
              sudo docker logs digital-kudos-wall-backend-1
              exit 1
            fi
            echo "Backend health check passed"

            echo "Running smoke tests in a self-contained Docker container..."
            sudo docker run --rm \
              --network digital-kudos-wall_kudos-net \
              -e TEST_ENV=uat \
              -e CI_BASE_URL=http://${FRONTEND_IP} \
              -e APP_BACKEND_URL=http://${BACKEND_IP}:3001 \
              -e NODE_ENV=uat \
              -e CI=true \
              mcr.microsoft.com/playwright:v1.44.0-jammy \
              /bin/bash -c "
                set -e
                echo 'Setting up test environment...' && \
                git clone https://github.com/${{ github.repository_owner }}/digital-kudos-wall-system-tests.git tests && \
                cd tests && \
                npm ci && \
                echo 'Running connectivity test...' && \
                curl -v http://${BACKEND_IP}:3001/health && \
                echo 'Running smoke tests...' && \
                npm run test:smoke
              "

  record_deployment_and_state:
    name: Record Deployment and State
    runs-on: ubuntu-latest
    needs: deploy_to_uat
    environment: uat
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Pact CLI
        run: |
          wget -q https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v2.4.1/pact-2.4.1-linux-x86_64.tar.gz
          tar xzf pact-2.4.1-linux-x86_64.tar.gz
          echo "$PWD/pact/bin" >> $GITHUB_PATH

      - name: Record frontend deployment to Pact Broker
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        run: |
          # Skip Pact recording if no Pact Broker is configured
          if [ -z "$PACT_BROKER_BASE_URL" ]; then
            echo "⚠️  No Pact Broker configured - skipping deployment recording"
            exit 0
          fi

          echo "Recording frontend deployment to Pact Broker..."
          pact-broker record-deployment \
            --pacticipant digital-kudos-wall-frontend \
            --version ${{ github.event.inputs.frontend_image_tag }} \
            --environment uat

      - name: Record backend deployment to Pact Broker
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        run: |
          # Skip Pact recording if no Pact Broker is configured
          if [ -z "$PACT_BROKER_BASE_URL" ]; then
            echo "⚠️  No Pact Broker configured - skipping deployment recording"
            exit 0
          fi

          echo "Recording backend deployment to Pact Broker..."
          pact-broker record-deployment \
            --pacticipant digital-kudos-wall-backend \
            --version ${{ github.event.inputs.backend_image_tag }} \
            --environment uat

      - name: Record Deployed Versions for Acceptance Tests
        run: |
          echo "Recording deployed versions for acceptance tests..."
          mkdir -p state

          frontend_uri_base='ghcr.io/chirag1507/digital-kudos-wall-frontend'
          backend_uri_base='ghcr.io/chirag1507/digital-kudos-wall-backend'
          frontend_img_with_tag="${frontend_uri_base}:${{ github.event.inputs.frontend_image_tag }}"
          backend_img_with_tag="${backend_uri_base}:${{ github.event.inputs.backend_image_tag }}"

          cat <<EOF > state/uat-deployed-versions.json
          {
            "frontend_image_uri_with_tag": "${frontend_img_with_tag}",
            "backend_image_uri_with_tag": "${backend_img_with_tag}"
          }
          EOF
          echo "Content of state/uat-deployed-versions.json:"
          cat state/uat-deployed-versions.json

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add state/uat-deployed-versions.json

          if git diff --staged --quiet; then
            echo "No changes to deployed versions file to commit."
          else
            git commit -m "CI: Record UAT deployed versions"
            git push
          fi

  run_smoke_tests:
    name: Run Smoke Tests on UAT
    runs-on: ubuntu-latest
    needs: record_deployment_and_state
    if: success()

    steps:
      - name: Checkout System Tests Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/digital-kudos-wall-system-tests
          path: digital-kudos-wall-system-tests

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install System Test Dependencies
        working-directory: ./digital-kudos-wall-system-tests
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ./digital-kudos-wall-system-tests
        run: |
          echo "Installing Playwright browsers..."
          npx playwright install --with-deps
          echo "Verifying browser installation..."
          npx playwright install-deps
          echo "Playwright installation completed"

      - name: Run Smoke Tests
        if: false # This step is now disabled and moved into the deploy job
        working-directory: ./digital-kudos-wall-system-tests
        env:
          TEST_ENV: uat
          CI_BASE_URL: http://${{ secrets.UAT_SSH_HOST }}:3000
          APP_BACKEND_URL: http://${{ secrets.UAT_SSH_HOST }}:3001
          CI: true
        run: |
          echo "Running smoke tests against UAT..."
          npm run test:smoke
