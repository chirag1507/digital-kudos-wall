name: Release to UAT

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      frontend_image_tag:
        description: "Frontend Docker image tag (commit SHA or tag)"
        required: true
        default: "latest"
      backend_image_tag:
        description: "Backend Docker image tag (commit SHA or tag)"
        required: true
        default: "latest"
      # Optional: Full image URIs if your registry/naming changes
      # frontend_image_uri:
      #   description: 'Full Frontend Docker image URI (e.g., ghcr.io/youruser/frontend)'
      #   required: false
      # backend_image_uri:
      #   description: 'Full Backend Docker image URI (e.g., ghcr.io/youruser/backend)'
      #   required: false

jobs:
  check_can_deploy:
    name: Check if services can be deployed to UAT
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - name: Install Pact CLI
        run: |
          wget -q https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v2.0.5/pact-2.0.5-linux-x86_64.tar.gz
          tar xzf pact-2.0.5-linux-x86_64.tar.gz
          echo "$PWD/pact/bin" >> $GITHUB_PATH

      - name: Can I deploy frontend?
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        run: |
          pact-broker can-i-deploy \
            --pacticipant digital-kudos-wall-frontend \
            --version ${{ github.event.inputs.frontend_image_tag }} \
            --to-environment uat

      - name: Can I deploy backend?
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        run: |
          pact-broker can-i-deploy \
            --pacticipant digital-kudos-wall-backend \
            --version ${{ github.event.inputs.backend_image_tag }} \
            --to-environment uat

  deploy_to_uat:
    name: Deploy to UAT Environment
    runs-on: ubuntu-latest
    needs: check_can_deploy
    environment: uat

    steps:
      - name: Set Image URIs with Tags
        id: image_uris
        run: |
          frontend_uri_base=${{ github.event.inputs.frontend_image_uri || 'ghcr.io/chirag1507/digital-kudos-wall-frontend' }}
          backend_uri_base=${{ github.event.inputs.backend_image_uri || 'ghcr.io/chirag1507/digital-kudos-wall-backend' }}

          echo "FRONTEND_IMG=${frontend_uri_base}:${{ github.event.inputs.frontend_image_tag }}" >> $GITHUB_ENV
          echo "BACKEND_IMG=${backend_uri_base}:${{ github.event.inputs.backend_image_tag }}" >> $GITHUB_ENV

          echo "Deploying Frontend: ${frontend_uri_base}:${{ github.event.inputs.frontend_image_tag }}"
          echo "Deploying Backend: ${backend_uri_base}:${{ github.event.inputs.backend_image_tag }}"

      - name: Deploy to UAT EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.UAT_SSH_HOST }}
          username: ${{ secrets.UAT_SSH_USER }}
          key: ${{ secrets.UAT_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Deploying to UAT..."
            export FRONTEND_IMAGE_URI_WITH_TAG="${{ env.FRONTEND_IMG }}"
            export BACKEND_IMAGE_URI_WITH_TAG="${{ env.BACKEND_IMG }}"

            cd /opt/digital-kudos-wall

            echo "VERIFYING DOCKER-COMPOSE.YML on EC2:"
            cat docker-compose.yml

            echo "VERIFYING RESOLVED DOCKER-COMPOSE CONFIG ON EC2:"
            sudo FRONTEND_IMAGE_URI_WITH_TAG="$FRONTEND_IMAGE_URI_WITH_TAG" BACKEND_IMAGE_URI_WITH_TAG="$BACKEND_IMAGE_URI_WITH_TAG" /usr/local/bin/docker-compose config

            echo "Stopping existing services (if any)..."
            sudo FRONTEND_IMAGE_URI_WITH_TAG="$FRONTEND_IMAGE_URI_WITH_TAG" BACKEND_IMAGE_URI_WITH_TAG="$BACKEND_IMAGE_URI_WITH_TAG" /usr/local/bin/docker-compose down || echo "No services were running or error during down, proceeding."

            echo "Running docker-compose pull..."
            sudo FRONTEND_IMAGE_URI_WITH_TAG="$FRONTEND_IMAGE_URI_WITH_TAG" BACKEND_IMAGE_URI_WITH_TAG="$BACKEND_IMAGE_URI_WITH_TAG" /usr/local/bin/docker-compose pull

            echo "Running docker-compose up -d --force-recreate..."
            sudo FRONTEND_IMAGE_URI_WITH_TAG="$FRONTEND_IMAGE_URI_WITH_TAG" BACKEND_IMAGE_URI_WITH_TAG="$BACKEND_IMAGE_URI_WITH_TAG" /usr/local/bin/docker-compose up -d --force-recreate frontend backend
            echo "Deployment script finished."

  record_deployment_and_state:
    name: Record Deployment and State
    runs-on: ubuntu-latest
    needs: deploy_to_uat
    environment: uat
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Pact CLI
        run: |
          wget -q https://github.com/pact-foundation/pact-ruby-standalone/releases/download/v2.0.5/pact-2.0.5-linux-x86_64.tar.gz
          tar xzf pact-2.0.5-linux-x86_64.tar.gz
          echo "$PWD/pact/bin" >> $GITHUB_PATH

      - name: Record frontend deployment to Pact Broker
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        run: |
          pact-broker record-deployment \
            --pacticipant digital-kudos-wall-frontend \
            --version ${{ github.event.inputs.frontend_image_tag }} \
            --environment uat

      - name: Record backend deployment to Pact Broker
        env:
          PACT_BROKER_BASE_URL: ${{ secrets.PACT_BROKER_BASE_URL }}
          PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
        run: |
          pact-broker record-deployment \
            --pacticipant digital-kudos-wall-backend \
            --version ${{ github.event.inputs.backend_image_tag }} \
            --environment uat

      - name: Record Deployed Versions for Acceptance Tests
        run: |
          echo "Recording deployed versions for acceptance tests..."
          mkdir -p state

          frontend_uri_base='ghcr.io/chirag1507/digital-kudos-wall-frontend'
          backend_uri_base='ghcr.io/chirag1507/digital-kudos-wall-backend'
          frontend_img_with_tag="${frontend_uri_base}:${{ github.event.inputs.frontend_image_tag }}"
          backend_img_with_tag="${backend_uri_base}:${{ github.event.inputs.backend_image_tag }}"

          cat <<EOF > state/uat-deployed-versions.json
          {
            "frontend_image_uri_with_tag": "${frontend_img_with_tag}",
            "backend_image_uri_with_tag": "${backend_img_with_tag}"
          }
          EOF
          echo "Content of state/uat-deployed-versions.json:"
          cat state/uat-deployed-versions.json

          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add state/uat-deployed-versions.json

          if git diff --staged --quiet; then
            echo "No changes to deployed versions file to commit."
          else
            git commit -m "CI: Record UAT deployed versions"
            git push
          fi

  run_smoke_tests:
    name: Run Smoke Tests on UAT
    runs-on: ubuntu-latest
    needs: record_deployment_and_state
    if: success()

    steps:
      - name: Checkout System Tests Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/digital-kudos-wall-system-tests
          path: digital-kudos-wall-system-tests

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Playwright Browsers
        working-directory: ./digital-kudos-wall-system-tests
        run: npx playwright install --with-deps

      - name: Install System Test Dependencies
        working-directory: ./digital-kudos-wall-system-tests
        run: npm ci

      - name: Run Smoke Tests
        working-directory: ./digital-kudos-wall-system-tests
        env:
          TEST_ENV: uat
          CI_BASE_URL: http://${{ secrets.UAT_SSH_HOST }}:3000
          APP_BACKEND_URL: http://${{ secrets.UAT_SSH_HOST }}:3001
          CI: true
        run: |
          echo "Running smoke tests against UAT..."
          npm run test:smoke
