name: UAT Acceptance Stage

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: "*/15 * * * *" # Runs every 15 minutes

concurrency:
  group: uat-acceptance-tests
  cancel-in-progress: false # Do not cancel ongoing tests if a new run is triggered; let them finish.

jobs:
  run_uat_acceptance_tests:
    name: Run Acceptance Tests on UAT Environment
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Main Repository (for state files)
        uses: actions/checkout@v4
        with:
          path: main-repo # Checkout to a specific path to avoid conflicts if checking out another repo

      - name: Checkout System Tests Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/digital-kudos-wall-system-tests
          path: system-tests-repo
          # token: ${{ secrets.PAT_FOR_SYSTEM_TESTS_REPO }} # Add if system tests repo is private & needs a PAT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18" # Or your desired Node.js version

      - name: Install System Test Dependencies
        working-directory: ./system-tests-repo
        run: npm ci

      - name: Install Playwright Browsers
        working-directory: ./system-tests-repo
        run: |
          echo "Installing Playwright browsers..."
          npx playwright install --with-deps
          echo "Verifying browser installation..."
          npx playwright install-deps
          echo "Playwright installation completed"

      - name: Install jq (for JSON processing)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check Versions and Run Acceptance Tests
        env:
          TEST_ENV: uat
          CI_BASE_URL: http://${{ secrets.UAT_SSH_HOST }}:3000
          APP_BACKEND_URL: http://${{ secrets.UAT_SSH_HOST }}:3001
          NODE_ENV: uat
          # GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Default token is usually sufficient for pushes to the same repo by actions
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          DEPLOYED_VERSIONS_FILE="./main-repo/state/uat-deployed-versions.json"
          LAST_TESTED_VERSIONS_FILE="./main-repo/state/uat-last-successfully-tested-versions.json"

          echo "Looking for deployed versions file: $DEPLOYED_VERSIONS_FILE"
          if [ ! -f "$DEPLOYED_VERSIONS_FILE" ]; then
            echo "Deployed versions file not found. Assuming no versions deployed yet or file is missing."
            echo "Skipping tests until deployment information is available."
            exit 0 # Exit successfully, nothing to test
          fi

          echo "Reading deployed versions from $DEPLOYED_VERSIONS_FILE"
          DEPLOYED_FRONTEND=$(jq -r '.frontend_image_uri_with_tag' "$DEPLOYED_VERSIONS_FILE")
          DEPLOYED_BACKEND=$(jq -r '.backend_image_uri_with_tag' "$DEPLOYED_VERSIONS_FILE")
          echo "Currently Deployed Frontend: $DEPLOYED_FRONTEND"
          echo "Currently Deployed Backend: $DEPLOYED_BACKEND"

          if [ "$DEPLOYED_FRONTEND" == "null" ] || [ "$DEPLOYED_BACKEND" == "null" ]; then
            echo "Error: Could not read valid version information from $DEPLOYED_VERSIONS_FILE. Content:"
            cat "$DEPLOYED_VERSIONS_FILE"
            exit 1 # Exit with error
          fi

          LAST_TESTED_FRONTEND=""
          LAST_TESTED_BACKEND=""

          echo "Looking for last successfully tested versions file: $LAST_TESTED_VERSIONS_FILE"
          if [ -f "$LAST_TESTED_VERSIONS_FILE" ]; then
            echo "Reading last tested versions from $LAST_TESTED_VERSIONS_FILE"
            LAST_TESTED_FRONTEND=$(jq -r '.frontend_image_uri_with_tag' "$LAST_TESTED_VERSIONS_FILE")
            LAST_TESTED_BACKEND=$(jq -r '.backend_image_uri_with_tag' "$LAST_TESTED_VERSIONS_FILE")
            echo "Last Successfully Tested Frontend: $LAST_TESTED_FRONTEND"
            echo "Last Successfully Tested Backend: $LAST_TESTED_BACKEND"
          else
            echo "Last successfully tested versions file not found. Will run tests."
          fi

          if [ "$DEPLOYED_FRONTEND" == "$LAST_TESTED_FRONTEND" ] && [ "$DEPLOYED_BACKEND" == "$LAST_TESTED_BACKEND" ]; then
            echo "Deployed versions are the same as the last successfully tested versions. No new tests needed."
            exit 0 # Exit successfully
          fi

          echo "New versions detected. Proceeding with UAT acceptance tests."
          echo "Frontend: $DEPLOYED_FRONTEND (was $LAST_TESTED_FRONTEND)"
          echo "Backend: $DEPLOYED_BACKEND (was $LAST_TESTED_BACKEND)"

          # Run Backend Connectivity Diagnostics first
          echo "Running backend connectivity diagnostics against UAT: $CI_BASE_URL"
          echo "Backend URL: $APP_BACKEND_URL"
          if ! npm run test:smoke --prefix ./system-tests-repo -- --grep "Backend Connectivity Diagnostics"; then
            echo "Backend connectivity diagnostics FAILED - this will help identify the root cause"
            echo "Proceeding with smoke tests anyway to gather more information..."
          else
            echo "Backend connectivity diagnostics PASSED."
          fi

          # Run Smoke Tests first
          echo "Running smoke tests against UAT: $CI_BASE_URL"
          if ! npm run test:smoke --prefix ./system-tests-repo; then
            echo "Smoke tests FAILED for Frontend: $DEPLOYED_FRONTEND, Backend: $DEPLOYED_BACKEND"
            # Optionally, you could update a different state file here to indicate smoke test failure
            # For now, just failing the job means these versions are not considered successfully tested at any level.
            exit 1 # Fail the job
          fi
          echo "Smoke tests PASSED."

          # Run Acceptance Tests if Smoke Tests passed
          echo "Running acceptance tests against UAT: $CI_BASE_URL"
          if ! npm run test:acceptance --prefix ./system-tests-repo; then
            echo "Acceptance tests FAILED for Frontend: $DEPLOYED_FRONTEND, Backend: $DEPLOYED_BACKEND"
            exit 1 # Fail the job
          fi

          echo "Acceptance tests PASSED for Frontend: $DEPLOYED_FRONTEND, Backend: $DEPLOYED_BACKEND"
          echo "Updating $LAST_TESTED_VERSIONS_FILE..."

          # Create the JSON content for the last tested versions
          cat <<EOF > "$LAST_TESTED_VERSIONS_FILE"
          {
            "frontend_image_uri_with_tag": "$DEPLOYED_FRONTEND",
            "backend_image_uri_with_tag": "$DEPLOYED_BACKEND"
          }
          EOF

          echo "Content of updated $LAST_TESTED_VERSIONS_FILE:"
          cat "$LAST_TESTED_VERSIONS_FILE"

          echo "Committing and pushing $LAST_TESTED_VERSIONS_FILE to main-repo..."
          cd ./main-repo # Change directory to where the .git of main-repo is
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add state/uat-last-successfully-tested-versions.json # Path relative to main-repo root

          if git diff --staged --quiet; then
            echo "No changes to $LAST_TESTED_VERSIONS_FILE to commit (this shouldn't happen if tests passed and versions were new)."
          else
            git commit -m "CI: Update UAT last successfully tested versions"
            echo "Attempting to push changes to remote repository..."
            git push
            echo "Push command executed."
          fi
          cd ../ # Return to original working directory
          echo "Acceptance test cycle complete."
